.method public hidebysig static void  SelectionSort(int32[] arr) cil managed
  {
    // Code size       57 (0x39)
    .maxstack  4
    .locals init (int32 V_0,
             int32 V_1,
             int32 V_2,
             int32 V_3)
    IL_0000:  ldc.i4.0 													push 0 int 32. onto the stack
    IL_0001:  stloc.0													pop 0 into local variable V_0. // int i.
    IL_0002:  br.s       IL_0032										branch to target shortform.

																		(*least = i*)
    IL_0004:  ldloc.0													push value from V_0 to the stack.
    IL_0005:  stloc.1													pop value to V_1.
																		
																		(*j = i+1*)
    IL_0006:  ldloc.0													push value from V_0 to the stack.
    IL_0007:  ldc.i4.1													push value 1.
    IL_0008:  add														pop 2 values and add the values then push result on stack
    IL_0009:  stloc.2													pop value to V_2. // int j.
	
    IL_000a:  br.s       IL_001a										branch to target shortform.
																		
																		(*IF Statement*)
    IL_000c:  ldarg.0													load argument 0 to the stack.
    IL_000d:  ldloc.2													push value from V_2
    IL_000e:  ldelem.i4													load element from array index of type int 32 // will pop from stack.
    IL_000f:  ldarg.0													load argument 0 to the stack.
    IL_0010:  ldloc.1													push V_1 to stack.
    IL_0011:  ldelem.i4													load element from array index of type int 32 
    IL_0012:  bge.s      IL_0016										branch greaterthanequal to target shortform 
																		
																		(*least = j*)
    IL_0014:  ldloc.2													push value from V_2
    IL_0015:  stloc.1													pop value to V_1
																		
																		(*j++*)
    IL_0016:  ldloc.2													push value from V_2
    IL_0017:  ldc.i4.1													push 1 to the stack.
    IL_0018:  add														pop 2 values and add the values then push result on stack
    IL_0019:  stloc.2													pop value to V_2
																		
																		(*j < arr.lenght*)
    IL_001a:  ldloc.2													push value from V_2
    IL_001b:  ldarg.0													load argument 0 to the stack.
    IL_001c:  ldlen														push length of array to stack
    IL_001d:  conv.i4													Convert to int 32 and push it to stack.
    IL_001e:  blt.s      IL_000c										branch to target if less than.
																		
																		(*array hell*)
    IL_0020:  ldarg.0												    load argument 0 to the stack.
    IL_0021:  ldloc.0												    push value from V_0
    IL_0022:  ldelem.i4													load element from array index of type int 32
    IL_0023:  stloc.3												    pop value to V_3
    IL_0024:  ldarg.0												    load argument 0 to the stack.
    IL_0025:  ldloc.0												    push value from V_0
    IL_0026:  ldarg.0												    load argument 0 to the stack.
    IL_0027:  ldloc.1												    push value from V_1
    IL_0028:  ldelem.i4													load element from array index of type int 32
    IL_0029:  stelem.i4													store element from top of stack into array on index 
    IL_002a:  ldarg.0													load argument 0 to the stack.
    IL_002b:  ldloc.1													push value from V_1
    IL_002c:  ldloc.3													push value from V_3
    IL_002d:  stelem.i4													store element from top of stack into array on index
	
																		(*i++*)
    IL_002e:  ldloc.0													push value from V_0
    IL_002f:  ldc.i4.1													push 1 to the stack.
    IL_0030:  add														pop 2 values and add the values then push result on stack
    IL_0031:  stloc.0													pop value to V_0
	
																		(*check for outer loop*)
    IL_0032:  ldloc.0													push value from V_0
    IL_0033:  ldarg.0													load argument 0 to the stack.
    IL_0034:  ldlen														push length of array to stack
    IL_0035:  conv.i4													Convert to int 32 and push it to stack.
																		(*end of outer for loop*)
    IL_0036:  blt.s      IL_0004										branch to target if less than. 

    IL_0038:  ret
  } // end of method Selsort::SelectionSort