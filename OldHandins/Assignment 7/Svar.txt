============================= 8.1 =============================

============================= Part 1 =============================

> compileToFile(fromFile"ex11.c") "ex11.out";;
val it : Machine.instr list =
  [LDARGS; CALL (1,"L1"); STOP; Label "L1"; INCSP 1; INCSP 1; INCSP 100; GETSP;
   CSTI 99; SUB; INCSP 100; GETSP; CSTI 99; SUB; INCSP 100; GETSP; CSTI 99;
   SUB; INCSP 100; GETSP; CSTI 99; SUB; GETBP; CSTI 2; ADD; CSTI 1; STI;
   INCSP -1; GOTO "L3"; Label "L2"; GETBP; CSTI 103; ADD; LDI; GETBP; CSTI 2;
   ADD; LDI; ADD; CSTI 0; STI; INCSP -1; GETBP; CSTI 2; ADD; GETBP; CSTI 2;
   ADD; LDI; CSTI 1; ADD; STI; INCSP -1; INCSP 0; Label "L3"; GETBP; CSTI 2;
   ADD; LDI; GETBP; CSTI 0; ADD; LDI; SWAP; LT; NOT; IFNZRO "L2"; GETBP;
   CSTI 2; ADD; CSTI 1; STI; INCSP -1; GOTO "L5"; Label "L4"; GETBP; CSTI 204;
   ADD; LDI; GETBP; CSTI 2; ADD; LDI; ADD; GETBP; CSTI 305; ADD; LDI; GETBP;
   CSTI 2; ADD; LDI; ADD; CSTI 0; STI; STI; INCSP -1; GETBP; CSTI 2; ADD; ...]
   
   
D:\GitHubRepoes\BPRD\Assignment 7\MicroC>javac Machine.java

D:\GitHubRepoes\BPRD\Assignment 7\MicroC>java Machine ex11.out 8
1 5 8 6 3 7 2 4
1 6 8 3 7 4 2 5
1 7 4 6 8 2 5 3
1 7 5 8 2 4 6 3
2 4 6 8 3 1 7 5
2 5 7 1 3 8 6 4
2 5 7 4 1 8 6 3
2 6 1 7 4 8 3 5
2 6 8 3 1 4 7 5
2 7 3 6 8 5 1 4
2 7 5 8 1 4 6 3
2 8 6 1 3 5 7 4
3 1 7 5 8 2 4 6
3 5 2 8 1 7 4 6
3 5 2 8 6 4 7 1
3 5 7 1 4 2 8 6
3 5 8 4 1 7 2 6
3 6 2 5 8 1 7 4
3 6 2 7 1 4 8 5
3 6 2 7 5 1 8 4
3 6 4 1 8 5 7 2
3 6 4 2 8 5 7 1
3 6 8 1 4 7 5 2
3 6 8 1 5 7 2 4
3 6 8 2 4 1 7 5
3 7 2 8 5 1 4 6
3 7 2 8 6 4 1 5
3 8 4 7 1 6 2 5
4 1 5 8 2 7 3 6
4 1 5 8 6 3 7 2
4 2 5 8 6 1 3 7
4 2 7 3 6 8 1 5
4 2 7 3 6 8 5 1
4 2 7 5 1 8 6 3
4 2 8 5 7 1 3 6
4 2 8 6 1 3 5 7
4 6 1 5 2 8 3 7
4 6 8 2 7 1 3 5
4 6 8 3 1 7 5 2
4 7 1 8 5 2 6 3
4 7 3 8 2 5 1 6
4 7 5 2 6 1 3 8
4 7 5 3 1 6 8 2
4 8 1 3 6 2 7 5
4 8 1 5 7 2 6 3
4 8 5 3 1 7 2 6
5 1 4 6 8 2 7 3
5 1 8 4 2 7 3 6
5 1 8 6 3 7 2 4
5 2 4 6 8 3 1 7
5 2 4 7 3 8 6 1
5 2 6 1 7 4 8 3
5 2 8 1 4 7 3 6
5 3 1 6 8 2 4 7
5 3 1 7 2 8 6 4
5 3 8 4 7 1 6 2
5 7 1 3 8 6 4 2
5 7 1 4 2 8 6 3
5 7 2 4 8 1 3 6
5 7 2 6 3 1 4 8
5 7 2 6 3 1 8 4
5 7 4 1 3 8 6 2
5 8 4 1 3 6 2 7
5 8 4 1 7 2 6 3
6 1 5 2 8 3 7 4
6 2 7 1 3 5 8 4
6 2 7 1 4 8 5 3
6 3 1 7 5 8 2 4
6 3 1 8 4 2 7 5
6 3 1 8 5 2 4 7
6 3 5 7 1 4 2 8
6 3 5 8 1 4 2 7
6 3 7 2 4 8 1 5
6 3 7 2 8 5 1 4
6 3 7 4 1 8 2 5
6 4 1 5 8 2 7 3
6 4 2 8 5 7 1 3
6 4 7 1 3 5 2 8
6 4 7 1 8 2 5 3
6 8 2 4 1 7 5 3
7 1 3 8 6 4 2 5
7 2 4 1 8 5 3 6
7 2 6 3 1 4 8 5
7 3 1 6 8 5 2 4
7 3 8 2 5 1 6 4
7 4 2 5 8 1 3 6
7 4 2 8 6 1 3 5
7 5 3 1 6 8 2 4
8 2 4 1 7 5 3 6
8 2 5 3 1 7 4 6
8 3 1 6 2 5 7 4
8 4 1 3 6 2 7 5

Ran 0.036 seconds

D:\GitHubRepoes\BPRD\Assignment 7\MicroC>

======================= Part 2 ==============================

> compileToFile(fromFile "ex3.c") "ex3.out";;
val it : Machine.instr list =
 [LDARGS; 									init
  CALL (1,"L1");
  STOP;
  Label "L1"; 								main
  INCSP 1;
  GETBP;
  CSTI 1; 
  ADD;						
  CSTI 0;									0
  STI; 										i=0
  INCSP -1;								
  GOTO "L3"; 								jump to L3
  Label "L2";								
  GETBP; 
  CSTI 1; 
  ADD; 
  LDI;										i
  PRINTI; 									print
  INCSP -1;
  GETBP; 
  CSTI 1; 
  ADD; 
  GETBP; 
  CSTI 1; 
  ADD; 
  LDI; 										i
  CSTI 1; 									1
  ADD;										i+1
  STI; 										i=i+1
  INCSP -1; 
  INCSP 0; 
  Label "L3"; 								while(i < n)
  GETBP; 
  CSTI 1; 
  ADD; 
  LDI; 										i
  GETBP; 
  CSTI 0;
  ADD; 
  LDI; 										n
  LT; 										i < n
  IFNZRO "L2";								jump to L2 if (i < n)
  INCSP -1; 
  RET 0]
  



> compileToFile(fromFile "ex5.c") "ex5.out";;
val it : Machine.instr list =
  [LDARGS; 									init
   CALL (1,"L1"); 
   STOP; 
   Label "L1"; 								main
   INCSP 1; 
   GETBP; 
   CSTI 1; 
   ADD; 
   GETBP;
   CSTI 0; 
   ADD; 
   LDI; 									r
   STI; 									r = n
   INCSP -1; 
   INCSP 1; 								{ Enter Block
   GETBP; 
   CSTI 0; 
   ADD; 
   LDI; 									r
   GETBP;
   CSTI 2; 
   ADD; 
   CALL (2,"L2"); 							square(n, &r)
   INCSP -1; 
   GETBP; 
   CSTI 2; 
   ADD; 
   LDI; 
   PRINTI;									print r 
   INCSP -1; 
   INCSP -1; 								} Exiting Block
   GETBP; 
   CSTI 1; 
   ADD; 
   LDI; 									r
   PRINTI; 									print r
   INCSP -1; 
   INCSP -1;
   RET 0; 
   Label "L2"; 								square
   GETBP; 
   CSTI 1; 
   ADD; 
   LDI; 									*rp
   GETBP; 
   CSTI 0; 
   ADD; 
   LDI; 									i
   GETBP;
   CSTI 0; 
   ADD; 
   LDI; 									i
   MUL; 									i * i
   STI; 									*rp = i * i
   INCSP -1; 
   INCSP 0; 
   RET 1]

============================= 8.3 =============================   
   Change to cExpr in Comp.fs
   
    | PreInc e -> cAccess e varEnv funEnv @ [DUP; LDI; CSTI 1; ADD; STI]
    | PreDec e -> cAccess e varEnv funEnv @ [DUP; LDI; CSTI 1; SUB; STI]  
    
   Change to type expr = in Absyn.fs
   
   | PreInc of access                 (* C/C++/Java/C# ++i or ++a[e] *)
   | PreDec of access                 (* C/C++/Java/C# ++i or ++a[e] *)
   
   PS D:\GitHubRepoes\BPRD\Assignment 7\MicroC> java Machine predecTest.out 7
    9 8 7
    Ran 0.002 seconds
   PS D:\GitHubRepoes\BPRD\Assignment 7\MicroC> java Machine predecTest.out -5
    9 8 7 6 5 4 3 2 1 0 -1 -2 -3 -4 -5
    Ran 0.001 seconds
    
   PS D:\GitHubRepoes\BPRD\Assignment 7\MicroC> java Machine preincTest.out 7
    1 2 3 4 5 6 7
    Ran 0.001 seconds
   PS D:\GitHubRepoes\BPRD\Assignment 7\MicroC> java Machine preincTest.out -5
    
    Ran 0.0 seconds
   
============================= 8.4 =============================

> compileToFile(fromFile "ex8.c") "ex8.out";;
val it : Machine.instr list =
  [LDARGS; 
   CALL (0,"L1"); 
   STOP; 
   Label "L1"; 
   INCSP 1; 
   GETBP; 
   CSTI 0; 
   ADD;
   CSTI 20000000; 
   STI; 
   INCSP -1; 
   GOTO "L3"; 
   Label "L2"; 
   GETBP; 
   CSTI 0; 
   ADD;
   GETBP; 
   CSTI 0; 
   ADD; 
   LDI; 
   CSTI 1; 
   SUB; 
   STI; 
   INCSP -1; 
   INCSP 0; 
   Label "L3";
   GETBP; 
   CSTI 0; 
   ADD; 
   LDI; 
   IFNZRO "L2"; 
   INCSP -1; 
   RET -1]

--------------------------------------------------------
prog1

0 20000000		CSTI 20000000;
16 7 			GOTO 7;
0 1 			CSTI 1;
2 				SUB;
9 				DUP;
18 4 			IFNZRO 4;
25				STOP;


Prog1 is 1 second faster since prog1 doesn't have to handle stackpointers or make any jumps between labels.
-------------------------------------------------------

> compileToFile(fromFile "ex13.c") "ex13.out";;
val it : Machine.instr list =
  [LDARGS; CALL (1,"L1"); STOP; 
   Label "L1"; 
   INCSP 1; 
   GETBP; CSTI 1; ADD;
   CSTI 1889; STI; INCSP -1; 
   GOTO "L3"; 
   Label "L2"; 
   GETBP; CSTI 1; ADD; GETBP; CSTI 1; ADD; LDI; CSTI 1; ADD; STI; INCSP -1; 
   GETBP; CSTI 1; ADD; LDI; CSTI 4; MOD; CSTI 0; EQ; IFZERO "L7"; 
   GETBP; CSTI 1; ADD; LDI; CSTI 100; MOD; CSTI 0; EQ; NOT; IFNZRO "L9"; 
   GETBP; CSTI 1; ADD; LDI; CSTI 400; MOD; CSTI 0; EQ; GOTO "L8"; 
   Label "L9"; 
   CSTI 1; 
   Label "L8"; 
   GOTO "L6";
   Label "L7"; 
   CSTI 0; 
   Label "L6"; 
   IFZERO "L4"; 
   GETBP; CSTI 1; ADD; 
   LDI; PRINTI; INCSP -1; 
   GOTO "L5"; 
   Label "L4"; 
   INCSP 0; 
   Label "L5"; 
   INCSP 0;
   Label "L3"; 
   GETBP; CSTI 1; ADD; LDI; GETBP; CSTI 0; ADD; LDI; LT; IFNZRO "L2"; 
   INCSP -1; 
   RET 0]

There exists 9 Labels L1 - L9 where every conditional statement has a label that they can jump to if they fail. Label L4 and L5 does nothing other than filling in bytecode. The if-body is under the Label L6.

============================= 8.5 =============================

-----
TEST
-----
MicroC fil: supIfTest.c
Parametre: int m, int n

compileToFile(fromFile "supIfTest.c")"supIfTest.out";;
val it : Machine.instr list =
  [LDARGS; CALL (2,"L1"); STOP; Label "L1"; GETBP; CSTI 0; ADD; LDI; GETBP;
   CSTI 1; ADD; LDI; LT; IFZERO "L2"; GETBP; CSTI 0; ADD; LDI; PRINTI;
   GOTO "L3"; Label "L2"; GETBP; CSTI 1; ADD; LDI; PRINTI; Label "L3";
   INCSP -1; INCSP 0; RET 1]
   
============================= 8.6 =============================

-----
TEST
-----
MicroC fil: switchTest.c

compileToFile(fromFile "switchTest.c")"switchTest.out";;
val it : Machine.instr list =
  [LDARGS; CALL (2,"L1"); STOP; Label "L1"; INCSP 1; GETBP; CSTI 2; ADD; GETBP;
   CSTI 0; ADD; LDI; STI; INCSP -1; INCSP 1; GETBP; CSTI 3; ADD; CSTI 0; STI;
   INCSP -1; GETBP; CSTI 2; ADD; LDI; CSTI 1; EQ; IFZERO "L3"; Label "L2";
   GETBP; CSTI 3; ADD; CSTI 31; STI; INCSP -1; Label "L3"; GETBP; CSTI 2; ADD;
   LDI; CSTI 2; EQ; IFZERO "L5"; Label "L4"; GETBP; CSTI 1; ADD; LDI; CSTI 4;
   MOD; CSTI 0; EQ; IFZERO "L6"; GETBP; CSTI 3; ADD; CSTI 29; STI; INCSP -1;
   GOTO "L7"; Label "L6"; INCSP 0; Label "L7"; Label "L5"; GETBP; CSTI 2; ADD;
   LDI; CSTI 3; EQ; IFZERO "L9"; Label "L8"; GETBP; CSTI 3; ADD; CSTI 31; STI;
   INCSP -1; Label "L9"; GETBP; CSTI 3; ADD; LDI; PRINTI; INCSP -1; INCSP -2;
   RET 1]